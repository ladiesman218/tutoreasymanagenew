# Docker Compose file for Vapor
#
# Install Docker on your system to run and test
# your Vapor app in a production-like environment.
#
# Learn more: https://docs.docker.com/compose/reference/
#
#   Build images: docker-compose build
#   Start app: docker-compose up app
#   Stop all: docker-compose down
#
#   docker-compose down will remove containers, next time when docker-compose up, containers will be back as long as images are there. DO NOT prune on volume with -a option when containers are down, otherwise database will be lost!
#
version: '3.7'
volumes:
  db_data:
services:
  app:
#6
    image: tutor-easy-manage:latest
    # Configure a bind mount to the directory where course files are stored. 
    volumes:
      - type: bind
        source: ../Courses
        target: /Courses
    build:
      context: . 
    environment:
      # Database host should be set to service db
      DATABASE_HOST: db
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      BREVOAPI: ${BREVOAPI}
      LC_ALL: zh_CN.UTF-8
    depends_on:
      - db 
    ports:
      - '8080:8080'
  # 11
    command: ["serve", "--env", "production", "--hostname", "0.0.0.0", "--port", "8080"]
# 13
  db:
    image: postgres:12-alpine
# 14
    volumes:
      - db_data:/tutoreasymanagenew/psql_db
    ports:
      - "${DATABASE_PORT}:${DATABASE_PORT}"
# 15
    environment:
      # PGDATA will be the path where db files reside in the db container, this should be set to the same value as in volume's db_data. Since we set it as an volume, db container will create a volume when first start up, check `docker volume ls` can see that, volume's name should be <service_name>_<volume_name>, which in our case is tutoreasymanage_db_data. Outside the container itself, where does the db file actually lives in the host???
      PGDATA: /tutoreasymanagenew/psql_db
      POSTGRES_DB: ${DATABASE_NAME}
      PGPORT: ${DATABASE_PORT}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      
